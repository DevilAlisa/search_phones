import aiohttp
import requests
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import sqlite3
from datetime import datetime

API_TOKEN = '6132505078:AAGqpyUUxTUmA5K3O3HprrxyvUXH3uElYRg'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü
conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                (id INTEGER PRIMARY KEY, username TEXT, full_name TEXT, reg_date TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS searches
                (user_id INTEGER, search_date TEXT, phone_number TEXT)''')
conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user_to_db(user_id, username, full_name):
    reg_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute("INSERT INTO users (id, username, full_name, reg_date) VALUES (?, ?, ?, ?)", (user_id, username, full_name, reg_date))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_search_to_db(user_id, phone_number):
    search_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute("INSERT INTO searches (user_id, search_date, phone_number) VALUES (?, ?, ?)", (user_id, search_date, phone_number))
    conn.commit()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    add_user_to_db(user_id, username, full_name)
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–º –Ω–æ–º–µ—Ä–µ. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789")

@dp.message_handler(regexp=r'\+\d{11}')
async def handle_phone_number(message: types.Message):
    phone_number = message.text
    user_id = message.from_user.id
    add_search_to_db(user_id, phone_number)
    fstep_msg = await message.answer('üìç *–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É, —Ä–µ–≥–∏–æ–Ω –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...*', parse_mode="Markdown")

    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://fincalculator.ru/api/tel/{phone_number}') as SBnum:
            datae = await SBnum.json()

    mnp = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    whatsapp = InlineKeyboardButton('‚úÖ Whatsapp', url=f'https://wa.me/{phone_number}')
    viber = InlineKeyboardButton('‚öõÔ∏è Viber', url=f'https://viber.click/{phone_number}')
    telegram = InlineKeyboardButton('üíé –¢–µ–ª–µ–≥—Ä–∞–º', url=f'https://t.me/{phone_number}')
    yandex = InlineKeyboardButton('„äóÔ∏è –Ø–Ω–¥–µ–∫—Å', url=f'https://yandex.ru/search/?text={phone_number}')
    google = InlineKeyboardButton('üåê Google', url=f'https://www.google.com/search?q={phone_number}')

    variations = InlineKeyboardMarkup().add(whatsapp, viber, telegram, yandex, google)

    await fstep_msg.delete()
    mnp_msg = await message.answer('üì∂ *–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–∞...*', parse_mode="Markdown")

    try:
        urlMNP = f"https://xn----dtbofgvdd5ah.xn--p1ai/php/mnp.php?nomer={phone_number}"
        mnpSiteSourc = requests.get(urlMNP).text.strip()
        mnp = mnpSiteSourc.replace('no', '–ù–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–ª—Å—è')
    except Exception as e:
        print(e)

    try:
        country = datae["country"]
        region = datae["region"]
        operator = datae["operator"]
        if country != '–†–æ—Å—Å–∏—è':
            fstep = f'üì≤ *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {phone_number}\n ‚îÇ *–°—Ç—Ä–∞–Ω–∞:* {country}\n ‚îÇ *–ü–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–∞:* {mnp}\n ‚îî *–û–ø–µ—Ä–∞—Ç–æ—Ä:* {region}'
            fstep_html = f'–°—Ç—Ä–∞–Ω–∞ {country}<br>–ü–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–∞: {mnp}<br>–û–ø–µ—Ä–∞—Ç–æ—Ä: {region}'
        else:
            fstep = f'üì≤ *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {phone_number}\n ‚îÇ *–°—Ç—Ä–∞–Ω–∞:* {country}\n ‚îÇ *–†–µ–≥–∏–æ–Ω:* {region}\n ‚îÇ *–ü–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–∞:* {mnp}\n ‚îî *–û–ø–µ—Ä–∞—Ç–æ—Ä:* {operator}'
            fstep_html = f'–°—Ç—Ä–∞–Ω–∞ {country}<br>–†–µ–≥–∏–æ–Ω: {region}<br>–ü–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–∞: {mnp}<br>–û–ø–µ—Ä–∞—Ç–æ—Ä: {operator}'
    except:
        country = '–ù–µ –æ–ø–æ–∑–Ω–∞–Ω–æ'
        region = '–ù–µ –æ–ø–æ–∑–Ω–∞–Ω–æ'
        operator = '–ù–µ –æ–ø–æ–∑–Ω–∞–Ω–æ'

    await mnp_msg.delete()
    await message.answer(fstep, reply_markup=variations,parse_mode="Markdown")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
